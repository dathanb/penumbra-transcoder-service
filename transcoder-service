#!/bin/bash

shopt -s nullglob

function elementIn {
    local e match="$1"
    shift
    for e; do 
        [[ "$e" == "$match" ]] && return 0
    done
    return 1
}

function transcode_video {
    local input_file=$1
    local staging_file=$2
    local output_file=$3
    echo "Transcoding $input_file -> $output_file"
    ffmpeg \
      -i "${input_file}" \
      -f matroska \
      -threads 4 \
      -c:v libx264 \
      -crf 18 \
      -c:a copy \
      -c:s copy \
      -progress "${output_file}.log" \
      "${staging_file}"
	if [[ $? == 0 ]]; then
		mv "${staging_file}" "${output_file}"
	fi
}

function transcode_bluray {
    local input_file=$1
    local staging_file=$2
    local output_file=$3
    transcode_video "${input_file}" "${staging_file}" "${output_file}"
}

function transcode_dvd {
    local input_file=$1
    local staging_file=$2
    local output_file=$3
    transcode_video "${input_file}" "${staging_file}" "$output_file"
}

function transcode_one_dvd {
    local input_prefix="/data/Pending/DVD"
    local staging_prefix="/data/Staging"
    local output_prefix="/data/Transcoded"
    local videos=("$input_prefix/"**)
    local existing_outputs=("$output_prefix"/**)
    local path
    local filename
    local output_path

    while [[ "${#videos}" -gt 0 ]]; do
        path="${videos[0]}"
        videos=("${videos[@]:1}") # shift videos
        filename="${path#$input_prefix/}"
        output_path="$output_prefix/${filename}"

        if elementIn "${output_path}" "${existing_outputs[@]}"; then
            echo "Skipping ${filename} because it appears to have already been transcoded"
            continue
        fi

        # transcode it
        transcode_dvd "$path" "$output_path"
        return 0
    done

    return 1
}

function transcode_one_bluray {
    local input_prefix="/data/Pending/Blu-ray"
    local staging_prefix="/data/Staging"
    local output_prefix="/data/Transcoded"
    local videos=("$input_prefix/"**)
    local existing_outputs=("$output_prefix"/**)
    local path
    local filename
    local output_path

    while [[ "${#videos}" -gt 0 ]]; do
        path="${videos[0]}"
        videos=("${videos[@]:1}") # shift videos
        filename="${path#$input_prefix/}"
		staging_path="${staging_prefix}/${filename}"
        output_path="$output_prefix/${filename}"

        if elementIn "${output_path}" "${existing_outputs[@]}"; then
            echo "Skipping ${filename} because it appears to have already been transcoded"
            continue
        fi

        # transcode it
        transcode_bluray "${path}" "${staging_path}" "${output_path}"
        return 0
    done

    return 1
}

function transcode_one {
    # attempt to pick a single video that doesn't appear to have been transcoded yet and transcode it
    transcode_one_bluray || transcode_one_dvd
}

rm -f /data/Staging/*.mkv
while [[ true ]]; do
    transcode_one || ( echo "No pending transcodings; sleeping for five minutes"; sleep 300 )
done


